---
import PostLayout from '@/layouts/PostLayout.astro';

// Components
import Badge from '@/components/Badge.astro';
import PortableText from '@/components/PortableText.astro';
import Separator from '@/components/Separator.astro';
import Calendar from '@/icons/Calendar.astro';
import Clock from '@/icons/Clock.astro';
import Pencil from '@/icons/Pencil.astro';
import Tag from '@/icons/Tag.astro';

// Definitions
import type { Post } from '@/lib/definitions';

// Utils
import { formatDate } from '@/lib/utils';
import { loadQuery } from '@/sanity/lib/load-query';
import { allPostsQuery, postBySlugQuery } from '@/sanity/lib/queries';

export async function getStaticPaths() {
  const { data: posts } = await loadQuery<Post[]>({
    query: allPostsQuery,
  });

  return posts.map(({ slug }) => ({
    params: { slug: slug.current },
  }));
}

const { params } = Astro;

const { data: post } = await loadQuery<Post>({
  query: postBySlugQuery,
  params: { slug: params.slug },
});

const date = formatDate(post.publishedAt);

const wordCount = post.body
  .map(
    (block: { children: { text: string }[] }) =>
      block.children?.map((c: { text: string }) => c.text).join(' ') ?? '',
  )
  .join(' ')
  .split(/\s+/).length;

const readingTime = Math.max(1, Math.round(wordCount / 200));
---

<PostLayout title={post.title} description={post.description}>
  <header class="post-meta">
    <h1 class="post-title">{post.title}</h1>
    <p class="post-description">{post.description}</p>
    <div class="post-info">
      <span class="post-info-item">
        <Pencil />
        Escrito por el creador
      </span>
      <span> · </span>
      <span class="post-info-item">
        <Calendar />
        {date}
      </span>
      <span> · </span>
      <span class="post-info-item">
        <Clock />
        {readingTime} min de lectura
      </span>
    </div>
    <ul class="post-categories">
      <Tag />
      {
        post.categories.map((category) => (
          <li>
            <Badge>{category.title}</Badge>
          </li>
        ))
      }
    </ul>
  </header>
  <Separator />
  <PortableText portableText={post.body} />
</PostLayout>

<style>
  .post-meta {
    margin-bottom: 2rem;
  }

  .post-info {
    font-size: 0.75rem;
    margin-bottom: 0.75rem;
    display: flex;
    gap: 0.25rem;
    flex-wrap: wrap;
  }

  .post-info-item {
    display: flex;
    align-items: center;
    gap: 0.25rem;
  }

  .post-title {
    font-size: 1.75rem;
    font-weight: 800;
    margin-bottom: 0.5rem;
  }

  .post-description {
    font-size: 1rem;
  }

  .post-categories {
    display: flex;
    flex: row;
    gap: 0.75rem;
    flex-wrap: wrap;
    align-items: center;
  }
</style>
